import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
  public static void main(String args[]) throws Exception {
    if(args.length==0) {
      new Parser(new Lexer(new InputStreamReader(System.in))).parse();
    } else {
      new Parser(new Lexer(new StringReader(args[0]))).parse();
    }  
  }


:}

action code {:
  // attributes & methods seen from actions

  String make_inst(String lab, String op, String arg) {
    return lab + "\t" + op + "\t" + arg + "\n";
  }
  String make_inst(String lab, String op, int arg) {
    return lab + "\t" + op + "\t" + arg + "\n";
  }

  String make_comm(String comment) {
    return ";/ " + comment + "\n";
  }

  String make_save_to_var(String var, String expr) {
      String label = make_label();  
    return 
      make_inst("","PUSH",var)
      +expr
      +make_inst("","STORE","");
  }

  String make_if(String type, String condition, String codeTrue, String codeWrong) {
      String label = make_label();  
    return condition
      +make_inst("",type,label+"False")
      +codeTrue
      +make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*")
      +codeWrong
      +make_inst(label+"End", "EQU", "*");
  }
  void change_scope(String var) {
    scopeId=var;
  }
  void add_scope(String var) {
    scopeId=scopeId+var;
  }
  void remove_scope(String var) {
    scopeId=scopeId.substring(0, scopeId.length() - (var.length()+1));
  }
  String make_scoped(String var) {
    return scopeId+"_" + var;
  }
  String make_var(String var) {
    return "var_" + make_scoped(var);
  }
  String make_label() {
    labelUuid++;
    return "label_" + labelUuid + "_";
  }
  String scopeId="";
  Integer labelUuid=0;
  void s_init() {
    scopeId="";
    labelUuid=0;
    change_scope("main");
  }
public class VarObject {
  public String identifier;
  public Integer offset;
  public String offsetExpression;
  public Boolean isArray;

  public VarObject(String identifier_, Integer offset_) {
    this.identifier=identifier_;
    this.offset=offset_;
    this.offsetExpression=make_inst("","PUSH", offset_.toString());
    this.isArray=true;
  }
  public VarObject(String identifier_, String offsetExpression_) {
    this.identifier=identifier_;
    this.offset = 0;
    this.offsetExpression=offsetExpression_;
    this.isArray=true;
  }
  public VarObject(String identifier_) {
    this.identifier=identifier_;
    this.offset=0;
    this.offsetExpression="";
    this.isArray=false;
  }
  public String emitAddress() {
    if(!this.isArray) {
      return make_inst("","PUSH",make_var(this.identifier));
    } else {
      return 
        make_inst("","PUSH",make_var(this.identifier))
        +this.offsetExpression
        +make_inst("","ADD","");
    }
  }
  public String emitAccess() {
    return this.emitAddress()+make_inst("","LOAD","");
  }
  public String emitDeclaration() {
    return make_inst(make_var(this.identifier),"DS", (!this.isArray) ? "1" : this.offset.toString());
  }
}
:}


terminal Integer TK_VAL; 
terminal String TK_IDENT;
terminal OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_MODULO, OP_ASSIGN, 
        OP_NOT, OP_AND, OP_OR,
        OP_EQ, OP_NEQ, OP_GREATER, OP_SMALLER, OP_GREATER_EQ, OP_SMALLER_EQ,
        TK_TERNARY_TRUE, TK_TERNARY_FALSE,
        OP_A_PLUS, OP_A_MINUS, OP_A_MULT, OP_A_DIVIDE;
terminal TK_PAR_OPEN, TK_PAR_CLOSE, TK_CURLY_BRACK_OPEN, TK_CURLY_BRACK_CLOSE, TK_BRACK_OPEN, TK_BRACK_CLOSE,
          TK_COND_IF, TK_COND_THEN, TK_COND_ELSE, TK_WHILE,
          TK_TYPE_INT, TK_TYPE_VOID;
terminal TK_DONE, TK_COMMA;
terminal TK_PRINT, TK_SCAN, TK_EXIT, TK_RETURN;

non terminal target;
non terminal String program, linst, inst, print, scanf, expr, cond_if, cond_then, cond_else, while_cond;
non terminal VarObject var_obj, var_obj_decl;
non terminal String var_list, func_obj_decl, func_obj_call, var_list_func, var_list_func_decl;

// associativite et priorite des operateurs
precedence left OP_ASSIGN, OP_A_PLUS, OP_A_MINUS, OP_A_MULT, OP_A_DIVIDE;
precedence left TK_TERNARY_TRUE, TK_TERNARY_FALSE;
precedence left OP_EQ, OP_NEQ, OP_GREATER, OP_SMALLER, OP_GREATER_EQ, OP_SMALLER_EQ;
precedence left OP_AND;
precedence left OP_OR;
precedence left OP_MODULO;
precedence left OP_PLUS, OP_MINUS;
precedence left OP_MULT, OP_DIVIDE;
precedence left TK_PAR_OPEN;
precedence left OP_NOT;
precedence left TK_BRACK_OPEN;
precedence left TK_VAL;

start with target;

target ::= program:s {: System.out.println(s); :}
  ;

program ::= linst:l {: RESULT = 
      make_inst("_REG_A","DS", 1)
      +make_inst("_REG_B","DS", 1)
      +make_inst("_REG_C","DS", 1)
      +l + "\tSTOP\n"; :}
  ;
linst ::= inst:i {: RESULT = i; :}
  | linst:l inst:i {: RESULT = l + i; :}
  ;
inst  ::= print:i TK_DONE {: RESULT = i; :}
  | scanf:i TK_DONE {: RESULT = i; :}
	| TK_DONE {: RESULT = ""; :}
  | TK_TYPE_INT var_list:vl TK_DONE {: RESULT = vl;:}
  | var_obj:v OP_ASSIGN expr:e TK_DONE {:    
      String comment = make_comm("assignation variable...");   
      RESULT = comment
        +v.emitAddress()
        +e
        +make_inst("","STORE",""); :}
  | cond_if:c {: RESULT = c;:}
  | while_cond:c {: RESULT=c;:}
  | func_obj_decl:f {: RESULT=f; :}
  | func_obj_call:f TK_DONE {: RESULT=f; :}
  | TK_EXIT TK_PAR_OPEN expr:e TK_PAR_CLOSE TK_DONE {: RESULT=e+make_inst("","STOP","");:}
  | TK_RETURN expr:e TK_DONE {: RESULT=e+make_inst("","SWAP","")+make_inst("","GOTO","");:}
  //| TK_CURLY_BRACK_OPEN linst:i TK_CURLY_BRACK_CLOSE {: RESULT=i; :}
	;
print ::= TK_PRINT expr:e
        {:
	    String comment = make_comm("print...");
	    RESULT = comment + e 
        +make_inst("","OUT","");
	:}
	;

scanf ::= TK_SCAN TK_IDENT:i
        {:
	    String comment = make_comm("scan...");
	    RESULT = comment 
      +make_inst("","PUSH",make_var(i))
      +make_inst("","IN","")
      +make_inst("","STORE","");
	:}
	;

cond_if ::= 
  TK_COND_IF expr:e TK_CURLY_BRACK_OPEN linst:i1 TK_CURLY_BRACK_CLOSE {: 
      String label = make_label();  
	    String comment = make_comm("if..." + label);    
      RESULT = comment +e
      +make_inst("","BEZ",label+"End")
      +i1
      +make_inst(label+"End", "EQU", "*");
      :}
  | TK_COND_IF expr:e TK_CURLY_BRACK_OPEN linst:i1 TK_CURLY_BRACK_CLOSE TK_COND_ELSE TK_CURLY_BRACK_OPEN linst:i2 TK_CURLY_BRACK_CLOSE {: 
      String label = make_label();  
	    String comment = make_comm("if..." + label);    
      RESULT = comment +e
      +make_inst("","BEZ",label+"False")
      +i1
      +make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*")
      +i2
      +make_inst(label+"End", "EQU", "*");
      :}
      ;
while_cond ::= TK_WHILE expr:e TK_CURLY_BRACK_OPEN linst:i1 TK_CURLY_BRACK_CLOSE {:
      String label = make_label();  
	    String comment = make_comm("while..." + label);    
      RESULT = comment       
      +make_inst(label+"Cond", "EQU", "*")
      +e
      +make_inst("","BEZ",label+"False")
      +i1
      +make_inst("","PUSH",label+"Cond")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*");
      :}
      ;
func_obj_decl ::= 
  TK_TYPE_VOID TK_IDENT:i {: change_scope(i); :}
      TK_PAR_OPEN var_list_func_decl:v TK_PAR_CLOSE TK_CURLY_BRACK_OPEN linst:in TK_CURLY_BRACK_CLOSE {:
      String label="label_func_"+i;
      RESULT=
      make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"Start", "EQU", "*")
      +v
      +in
      +make_inst("","GOTO","")
      +make_inst(label+"End", "EQU", "*");
      change_scope("main");
      :}

  | TK_TYPE_INT TK_IDENT:i {: change_scope(i); :}
      TK_PAR_OPEN var_list_func_decl:v TK_PAR_CLOSE TK_CURLY_BRACK_OPEN linst:in TK_CURLY_BRACK_CLOSE {:
      String label="label_func_"+i;
      RESULT=
      make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"Start", "EQU", "*")
      +v
      +in
      +make_inst("","GOTO","")
      +make_inst(label+"End", "EQU", "*");
      change_scope("main");
      :}
      ;

func_obj_call ::= 
  TK_IDENT:i TK_PAR_OPEN var_list_func:v TK_PAR_CLOSE {:
      String label=make_label();
      String funcLabel="label_func_"+i;
      RESULT=v
      +make_inst("","PUSH",label)
      +make_inst("","PUSH",funcLabel+"Start")
      +make_inst("","GOTO","")
      +make_inst(label, "EQU", "*");
      :}
      ;
expr ::= TK_VAL:i {: RESULT = make_inst("","PUSH",i.toString()); :}
  | var_obj:v {: RESULT=v.emitAccess(); :}
  | func_obj_call:f {:RESULT=f;:}
  | expr:e1 OP_PLUS expr:e2 {: RESULT = e1+e2+make_inst("","ADD",""); :}
  | expr:e1 OP_MINUS expr:e2 {: RESULT = e1+e2+make_inst("","SUB",""); :}
  | expr:e1 OP_MULT expr:e2 {: RESULT = e1+e2+make_inst("","MUL",""); :}
  | expr:e1 OP_DIVIDE expr:e2 {: RESULT = e1+e2+make_inst("","DIV",""); :}
  | expr:e1 OP_GREATER expr:e2 {: 
      String label = make_label();  
      RESULT = 
      e1+e2+make_inst("","SUB","")
      +make_inst("","BGZ",label+"False")
      +make_inst("","PUSH",0)
      +make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*")
      +make_inst("","PUSH",1)
      +make_inst(label+"End", "EQU", "*"); :}
  | expr:e1 OP_SMALLER expr:e2 {: 
      String label = make_label();  
      RESULT = 
      e2+e1+make_inst("","SUB","")
      +make_inst("","BGZ",label+"False")
      +make_inst("","PUSH",0)
      +make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*")
      +make_inst("","PUSH",1)
      +make_inst(label+"End", "EQU", "*"); :}
  | expr:e1 OP_GREATER_EQ expr:e2 {: 
      String label = make_label();  
      RESULT = 
      make_save_to_var("_REG_A",e1+e2+make_inst("","SUB",""))
      +make_inst("","PUSH","_REG_A")+make_inst("","LOAD","")
      +make_inst("","BGZ",label+"False")
      +make_inst("","PUSH","_REG_A")+make_inst("","LOAD","")
      +make_inst("","BEZ",label+"False")
      +make_inst("","PUSH",0)
      +make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*")
      +make_inst("","PUSH",1)
      +make_inst(label+"End", "EQU", "*"); :}
  | expr:e1 OP_SMALLER_EQ expr:e2 {: 
      String label = make_label();  
      RESULT = 
      make_save_to_var("_REG_A",e2+e1+make_inst("","SUB",""))
      +make_inst("","PUSH","_REG_A")+make_inst("","LOAD","")
      +make_inst("","BGZ",label+"False")
      +make_inst("","PUSH","_REG_A")+make_inst("","LOAD","")
      +make_inst("","BEZ",label+"False")
      +make_inst("","PUSH",0)
      +make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*")
      +make_inst("","PUSH",1)
      +make_inst(label+"End", "EQU", "*"); :}
  | expr:e1 OP_EQ expr:e2 {: 
      String label = make_label();  
      RESULT = 
      e1+e2+make_inst("","SUB","")
      +make_inst("","BEZ",label+"False")
      +make_inst("","PUSH",0)
      +make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*")
      +make_inst("","PUSH",1)
      +make_inst(label+"End", "EQU", "*"); :}
  | expr:e1 OP_NEQ expr:e2 {: 
      String label = make_label();  
      RESULT = 
      e1+e2+make_inst("","SUB","")
      +make_inst("","BEZ",label+"False")
      +make_inst("","PUSH",1)
      +make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*")
      +make_inst("","PUSH",0)
      +make_inst(label+"End", "EQU", "*"); :}
  | expr:e1 OP_AND expr:e2 {: 
      String label = make_label();  
      RESULT = 
      e1+e2+make_inst("","AND","")
      +make_inst("","BEZ",label+"False")
      +make_inst("","PUSH",1)
      +make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*")
      +make_inst("","PUSH",0)
      +make_inst(label+"End", "EQU", "*"); :}
  | expr:e1 OP_OR expr:e2 {: 
      String label = make_label();  
      RESULT = 
      e1+e2+make_inst("","OR","")
      +make_inst("","BEZ",label+"False")
      +make_inst("","PUSH",1)
      +make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*")
      +make_inst("","PUSH",0)
      +make_inst(label+"End", "EQU", "*"); :}
  | OP_NOT expr:e2 {: 
      String label = make_label();  
      RESULT = 
      e2
      +make_inst("","BEZ",label+"False")
      +make_inst("","PUSH",1)
      +make_inst("","PUSH",label+"End")
      +make_inst("","GOTO","")
      +make_inst(label+"False", "EQU", "*")
      +make_inst("","PUSH",0)
      +make_inst(label+"End", "EQU", "*"); :}
  | expr:e1 OP_MODULO expr:e2 {: 
      RESULT = // a-b*(b/a)
      make_save_to_var("_REG_A",e1)
      +make_save_to_var("_REG_B",e2)
      +make_inst("","PUSH","_REG_A")+make_inst("","LOAD","")
      +make_inst("","PUSH","_REG_B")+make_inst("","LOAD","")
      +make_inst("","PUSH","_REG_A")+make_inst("","LOAD","")
      +make_inst("","PUSH","_REG_B")+make_inst("","LOAD","")
      +make_inst("","DIV","")
      +make_inst("","MUL","")
      +make_inst("","SUB",""); :}
  | TK_PAR_OPEN expr:e1 TK_PAR_CLOSE {: RESULT = e1; :}
	;

var_obj ::= 
    TK_IDENT:i {: RESULT = new VarObject(i);  :}
  | TK_IDENT:i TK_BRACK_OPEN expr:e TK_BRACK_CLOSE {: RESULT = new VarObject(i,e); :} 
  | TK_IDENT:i TK_BRACK_OPEN TK_VAL:i2 TK_BRACK_CLOSE {: RESULT = new VarObject(i,i2); :} 
  ;

var_obj_decl ::= 
    TK_IDENT:i {: RESULT = new VarObject(i);  :}
  | TK_IDENT:i TK_BRACK_OPEN TK_VAL:i2 TK_BRACK_CLOSE {: RESULT = new VarObject(i,i2); :} 
  ;
var_list_func_decl ::=
  TK_TYPE_INT var_obj_decl:v {: RESULT= 
        v.emitDeclaration()
        +make_inst("","SWAP","")        
        +v.emitAddress()
        +make_inst("","SWAP","")  
        +make_inst("","STORE","") ;:}
  | var_list_func_decl:vl  TK_COMMA TK_TYPE_INT var_obj_decl:v {: RESULT= vl+v.emitDeclaration();:}
  ;
var_list_func ::=
  expr:e {: RESULT= e;:}
  | var_list_func:vl  TK_COMMA expr:e {: RESULT= vl+e;:}
  ;

var_list ::=
  var_obj_decl:v {: RESULT= v.emitDeclaration();:}
  | var_obj_decl:v OP_ASSIGN expr:e {: RESULT= 
      v.emitDeclaration()
      +v.emitAddress()
      +e
      +make_inst("","STORE","");:}
  | var_list:vl  TK_COMMA var_obj_decl:v {: RESULT= vl+v.emitDeclaration();:}
  | var_list:v1 TK_COMMA var_obj_decl:v OP_ASSIGN expr:e {: RESULT= 
      v1
      +v.emitDeclaration()
      +v.emitAddress()
      +e
      +make_inst("","STORE","");:}
  ;
